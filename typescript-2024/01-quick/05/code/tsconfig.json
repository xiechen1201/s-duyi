{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 了解更多关于此文件的信息 */

    /* 项目 */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允许项目的增量编译。 */
    // "composite": true,                                /* 启用允许 TypeScript 项目与项目引用一起使用的约束。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用在引用组合项目时优先选择源文件而不是声明文件。 */
    // "disableSolutionSearching": true,                 /* 在编辑时排除项目参与多项目引用检查。 */
    // "disableReferencedProjectLoad": true,             /* 减少TypeScript自动加载的项目数量。 */

    /* 语言和环境 */
    "target": "es2016",                                   /* 为生成的 JavaScript 和包含兼容库声明设置 JavaScript 语言版本。 */
    "lib": [
      "ESNext",
      "DOM",
    ], /* 指定描述目标运行时环境的一组捆绑库声明文件。 */
    // "jsx": "preserve",                                /* 指定生成哪种 JSX 代码。 */
    // "experimentalDecorators": true,                   /* 启用对传统实验性装饰器的实验性支持。 */
    // "emitDecoratorMetadata": true,                    /* 在源文件中为装饰的声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定在针对 React JSX 发出时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
    // "jsxFragmentFactory": "",                         /* 指定在针对 React JSX 发出时用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。 */
    // "jsxImportSource": "",                            /* 使用 'jsx: react-jsx*' 时指定用于导入 JSX 工厂函数的模块说明符。 */
    // "reactNamespace": "",                             /* 指定用于 'createElement' 的对象。这仅适用于针对 'react' JSX 发出。 */
    // "noLib": true,                                    /* 禁用包含任何库文件，包括默认的 lib.d.ts。 */
    // "useDefineForClassFields": true,                   /* 发出符合 ECMAScript 标准的类字段。 */
    // "moduleDetection": "auto",                        /* 控制用于检测模块格式 JS 文件的方法。 */
    
    /* 模块 */
    "module": "NodeNext",                                /* 指定生成哪种模块代码。 */
    // "rootDir": "./",                                  /* 指定源文件中的根文件夹。 */
    // "moduleResolution": "node10",                     /* 指定 TypeScript 如何从给定的模块说明符查找文件。 */
    // "baseUrl": "./",                                  /* 指定用于解析非相对模块名称的基本目录。 */
    // "paths": {},                                      /* 指定一组条目以重新映射导入到其他查找位置。 */
    // "rootDirs": [],                                   /* 允许将多个文件夹视为一个来解决模块。 */
    // "typeRoots": [],                                  /* 指定多个文件夹，这些文件夹的作用类似于 './node_modules/@types'。 */
    // "types": [],                                      /* 指定要在源文件中引用的类型包名称。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
    // "moduleSuffixes": [],                              /* 指定在解析模块时要搜索的文件名后缀列表。 */
    // "allowImportingTsExtensions": true,               /* 允许导入带有 TypeScript 文件扩展名的文件。需要设置 '--moduleResolution bundler' 和 '--noEmit' 或 '--emitDeclarationOnly'。 */
    // "resolvePackageJsonExports": true,                /* 在解析包导入时使用 package.json 的 'exports' 字段。 */
    // "resolvePackageJsonImports": true,                /* 在解析导入时使用 package.json 的 'imports' 字段。 */
    // "customConditions": [],                           /* 在解析导入时添加到解析器特定默认值之外的附加条件。 */
    // "noUncheckedSideEffectImports": true,             /* 检查副作用导入。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件。 */
    // "allowArbitraryExtensions": true,                 /* 允许导入任何扩展名的文件，只要存在声明文件。 */
    // "noResolve": true,                                /* 禁止 'import's、'require's 或 '<reference>' 扩展 TypeScript 应该添加到项目中的文件数量。 */
    
    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为您程序的一部分。使用 'checkJS' 选项可以从这些文件中获取错误。 */
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定从 'node_modules' 检查 JavaScript 文件的最大文件夹深度。仅适用于 'allowJs'。 */
    
    /* 发出 */
    "declaration": true,                                  /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
    // "declarationMap": true,                           /* 为 .d.ts 文件创建源映射。 */
    // "emitDeclarationOnly": true,                      /* 仅输出 .d.ts 文件而不输出 JavaScript 文件。 */
    // "sourceMap": true,                                /* 为发出的 JavaScript 文件创建源映射文件。 */
    // "inlineSourceMap": true,                          /* 在发出的 JavaScript 内部包含源映射文件。 */
    // "noEmit": true,                                   /* 禁止从编译中发出文件。 */
    // "outFile": "./",                                  /* 指定将所有输出捆绑到一个 JavaScript 文件中的文件。如果 'declaration' 为 true，也指定一个捆绑所有 .d.ts 输出的文件。 */
    "outDir": "./dist", /* 指定所有发出文件的输出文件夹。 */
    // "removeComments": true,                           /* 禁止发出注释。 */
    // "importHelpers": true,                            /* 允许从 tslib 一次导入帮助函数，而不是每个文件都包含它们。 */
    // "downlevelIteration": true,                       /* 为迭代发出更符合标准但更冗长且性能较低的 JavaScript。 */
    // "sourceRoot": "",                                 /* 指定调试器查找引用源代码的根路径。 */
    // "mapRoot": "",                                    /* 指定调试器应定位映射文件的 location，而不是生成的位置。 */
    // "inlineSources": true,                            /* 在发出的 JavaScript 内部包含源代码。 */
    // "emitBOM": true,                                  /* 在输出文件的开头发出 UTF-8 字节顺序标记 (BOM)。 */
    // "newLine": "crlf",                                /* 设置发出文件的换行符。 */
    // "stripInternal": true,                            /* 禁止发出 JSDoc 注释中带有 '@internal' 的声明。 */
    // "noEmitHelpers": true,                            /* 禁止在编译输出中生成自定义帮助函数，如 '__extends'。 */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁止发出文件。 */
    // "preserveConstEnums": true,                       /* 禁止在生成的代码中删除 'const enum' 声明。 */
    "declarationDir": "./types",                           /* 指定生成声明文件的输出目录。 */
    
    /* 互操作性约束 */
    // "isolatedModules": true,                          /* 确保每个文件都可以安全地转译，而不依赖于其他导入。 */
    // "verbatimModuleSyntax": true,                     /* 不转换或省略任何未标记为仅类型（type-only）的导入或导出，确保它们根据 'module' 设置以输出文件的格式写入。 */
    // "isolatedDeclarations": true,                     /* 要求对导出进行足够的注释，以便其他工具可以轻松生成声明文件。 */
    // "allowSyntheticDefaultImports": true,             /* 允许 'import x from y'，即使模块没有默认导出。 */
    "esModuleInterop": true, /* 发出额外的 JavaScript 以便于导入 CommonJS 模块。这为类型兼容性启用了 'allowSyntheticDefaultImports'。 */
    // "preserveSymlinks": true,                         /* 禁止将符号链接解析为其真实路径。这与 node 中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true, /* 确保导入中的大小写正确。 */
    
    /* 类型检查 */
    "strict": true, /* 启用所有严格的类型检查选项。 */
    // "noImplicitAny": true,                            /* 启用对具有隐含 'any' 类型的表达式和声明的错误报告。 */
    // "strictNullChecks": true,                         /* 在类型检查时考虑 'null' 和 'undefined'。 */
    // "strictFunctionTypes": true,                      /* 在分配函数时，检查参数和返回值是否子类型兼容。 */
    // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配。 */
    // "strictPropertyInitialization": true,             /* 检查类属性是否在构造函数中声明但未设置。 */
    // "strictBuiltinIteratorReturn": true,              /* 内置迭代器的 'TReturn' 类型为 'undefined' 而不是 'any'。 */
    // "noImplicitThis": true,                           /* 启用当 'this' 被赋予 'any' 类型的错误报告。 */
    // "useUnknownInCatchVariables": true,               /* 默认将 catch 子句变量设置为 'unknown' 而不是 'any'。 */
    // "alwaysStrict": true,                             /* 确保 'use strict' 总是发出。 */
    // "noUnusedLocals": true,                           /* 启用当局部变量未被读取时的错误报告。 */
    // "noUnusedParameters": true,                       /* 当函数参数未被读取时引发错误。 */
    // "exactOptionalPropertyTypes": true,               /* 将可选属性类型按原样解释，而不是添加 'undefined'。 */
    // "noImplicitReturns": true,                        /* 启用当函数中没有显式返回的代码路径时的错误报告。 */
    // "noFallthroughCasesInSwitch": true,               /* 启用对 switch 语句中 fallthrough 情况的错误报告。 */
    // "noUncheckedIndexedAccess": true,                 /* 在使用索引访问时向类型添加 'undefined'。 */
    // "noImplicitOverride": true,                       /* 确保派生类中重写的成员带有 override 修饰符。 */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器来访问使用索引类型声明的键。 */
    // "allowUnusedLabels": true,                        /* 禁止未使用标签的错误报告。 */
    // "allowUnreachableCode": true,                     /* 禁止不可达代码的错误报告。 */
    
    /* 完整性 */
    // "skipDefaultLibCheck": true,                      /* 跳过对包含在 TypeScript 中的 .d.ts 文件的类型检查。 */
    "skipLibCheck": true /* 跳过对所有 .d.ts 文件的类型检查。 */
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ],
}