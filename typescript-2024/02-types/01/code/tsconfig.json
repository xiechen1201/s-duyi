{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 了解有关此文件的更多信息 */
    /* 项目 */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以允许项目增量编译。 */
    // "composite": true,                                /* 启用约束，以允许 TypeScript 项目与项目引用一起使用。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用引用复合项目时优先使用源文件而不是声明文件。 */
    // "disableSolutionSearching": true,                 /* 编辑时禁用多项目引用检查。 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。 */
    /* 语言和环境 */
    "target": "es2016", /* 设置生成的 JavaScript 语言版本，并包含兼容的库声明。 */
    // "lib": [],                                        /* 指定一组捆绑的库声明文件，以描述目标运行时环境。 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码类型。 */
    // "experimentalDecorators": true,                   /* 启用对实验性装饰器的支持。 */
    // "emitDecoratorMetadata": true,                    /* 在源文件中为装饰器生成设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定在生成 React JSX 代码时使用的 JSX 工厂函数，例如 'React.createElement' 或 'h'。 */
    // "jsxFragmentFactory": "",                         /* 指定用于片段的 JSX 片段引用，例如 'React.Fragment' 或 'Fragment'。 */
    // "jsxImportSource": "",                            /* 指定使用 'jsx: react-jsx*' 时导入 JSX 工厂函数的模块规范符。 */
    // "reactNamespace": "",                             /* 指定用于调用 'createElement' 的对象，仅在使用 'react' JSX 生成时适用。 */
    // "noLib": true,                                    /* 禁用包含任何库文件，包括默认的 lib.d.ts 文件。 */
    // "useDefineForClassFields": true,                  /* 使用符合 ECMAScript 标准的类字段。 */
    // "moduleDetection": "auto",                        /* 控制用于检测模块格式的 JS 文件方法。 */
    /* 模块 */
    "module": "NodeNext", /* 指定生成的模块代码类型。 */
    // "rootDir": "./",                                  /* 指定源文件的根目录。 */
    // "moduleResolution": "node10",                     /* 指定 TypeScript 查找模块规范符时的解析策略。 */
    // "baseUrl": "./",                                  /* 指定用于解析非相对模块名称的基础目录。 */
    // "paths": {},                                      /* 指定重映射导入路径的条目。 */
    // "rootDirs": [],                                   /* 允许多个文件夹在解析模块时视为一个。 */
    // "typeRoots": [],                                  /* 指定类似于 './node_modules/@types' 的多个文件夹。 */
    // "types": [],                                      /* 指定无需在源文件中引用即可包含的类型包名称。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
    // "moduleSuffixes": [],                             /* 搜索模块时的文件名后缀列表。 */
    // "allowImportingTsExtensions": true,               /* 允许导入 TypeScript 文件扩展名，需启用 '--moduleResolution bundler' 并设置 '--noEmit' 或 '--emitDeclarationOnly'。 */
    // "resolvePackageJsonExports": true,                /* 在解析包导入时使用 package.json 中的 'exports' 字段。 */
    // "resolvePackageJsonImports": true,                /* 在解析导入时使用 package.json 中的 'imports' 字段。 */
    // "customConditions": [],                           /* 在解析导入时，除了解析器默认值之外的条件集。 */
    // "noUncheckedSideEffectImports": true,             /* 检查副作用导入。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件。 */
    // "allowArbitraryExtensions": true,                 /* 允许导入任何扩展名的文件，前提是存在声明文件。 */
    // "noResolve": true,                                /* 禁止通过 'import'、'require' 或 '<reference>' 扩展 TypeScript 添加到项目中的文件数量。 */
    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为项目的一部分。使用 'checkJS' 选项来启用 JavaScript 文件的错误检查。 */
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定检查 'node_modules' 中 JavaScript 文件的最大文件夹深度，仅在启用 'allowJs' 时适用。 */
    /* 输出 */
    // "declaration": true,                              /* 为项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 声明文件。 */
    // "sourceMap": true,                                /* 为生成的 JavaScript 文件创建源映射文件。 */
    // "inlineSourceMap": true,                          /* 在生成的 JavaScript 中包含内联源映射文件。 */
    // "noEmit": true,                                   /* 禁止生成编译输出文件。 */
    // "outDir": "./",                                   /* 指定所有生成文件的输出文件夹。 */
    // "removeComments": true,                           /* 禁止在输出文件中包含注释。 */
    // "inlineSources": true,                            /* 在生成的 JavaScript 文件中包含源代码。 */
    /* 兼容性约束 */
    "esModuleInterop": true, /* 生成额外的 JavaScript 以支持 CommonJS 模块的导入，启用 'allowSyntheticDefaultImports' 以兼容类型检查。 */
    "forceConsistentCasingInFileNames": true, /* 确保导入中的文件名大小写正确。 */
    /* 类型检查 */
    "strict": true, /* 启用所有严格的类型检查选项。 */
    /* 完整性 */
    "skipLibCheck": true /* 跳过所有 .d.ts 文件的类型检查。 */
  },
}